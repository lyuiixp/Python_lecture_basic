#ex1) 배터리 상태 확인 후 경고 메세지 출력 메소드
def check_battery(self):
    if self.battery < 20:
        print(f"Warning: {self.name}'s battery is low ({self.battery}%).")
    else:
        print(f"{self.name}'s battery is at {self.battery}%.")

#ex2) 이동 기록을 텍스트 파일에 저장하는 메소드
def save_movement_history(self, direction):
    with open('movement_log.txt', 'a', encoding='utf-8') as file:
        file.write(f"{self.name} moved {direction} at speed {self.speed}\n")
        
#ex3) 특정 폴더 내에 파일을 저장하거나 불러올때 해당 폴더가 없으면 생성
    try:
        # 디렉토리가 없으면 생성
        if not os.path.exists(directory):
            os.makedirs(directory)
            print(f"'{directory}' 폴더가 생성되었습니다.")
        
        # 파일 저장
        file_path = os.path.join(directory, filename)
        with open(file_path, 'w') as file:
            file.write(content)
        print(f"'{file_path}'에 파일이 저장되었습니다.")
    
    except Exception as e:
        print(f"파일 저장 중 오류 발생: {e}")

#ex4) main문에서 움직임을 계속 입력받고 배터리가 없으면 멈추거나 멈추는 입력을 받아 동작 정지
while True:
    user_input = input("움직임을 입력하세요 (forward, backward, left, right) 또는 'stop' 입력 시 종료: ").strip().lower()
    
    if user_input == 'stop':
        print("프로그램을 종료합니다.")
        break
    
    if robot.battery <= 0:
        print(f"{robot.name}의 배터리가 부족하여 더 이상 움직일 수 없습니다.")
        break
    
    if user_input == 'forward':
        movement.move_forward()
